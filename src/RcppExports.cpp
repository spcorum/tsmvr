// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tsmvr.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// project_pdc
arma::mat project_pdc(const arma::mat& X, const double delta);
static SEXP _tsmvr_project_pdc_try(SEXP XSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(project_pdc(X, delta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tsmvr_project_pdc(SEXP XSEXP, SEXP deltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tsmvr_project_pdc_try(XSEXP, deltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ht
arma::mat ht(arma::mat X, int s, bool ss);
static SEXP _tsmvr_ht_try(SEXP XSEXP, SEXP sSEXP, SEXP ssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type ss(ssSEXP);
    rcpp_result_gen = Rcpp::wrap(ht(X, s, ss));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tsmvr_ht(SEXP XSEXP, SEXP sSEXP, SEXP ssSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tsmvr_ht_try(XSEXP, sSEXP, ssSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tsmvr_solve
List tsmvr_solve(const arma::mat& X, const arma::mat& Y, const int& s1, const int& s2, const std::string& B_type, const std::string& Omega_type, const double& eta1, const double& eta2, const double& rho1, const double& rho2, const double& beta1, const double& beta2, const double& epsilon, const int& max_iter, const int& skip, const bool& quiet, const bool& suppress);
static SEXP _tsmvr_tsmvr_solve_try(SEXP XSEXP, SEXP YSEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP B_typeSEXP, SEXP Omega_typeSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP epsilonSEXP, SEXP max_iterSEXP, SEXP skipSEXP, SEXP quietSEXP, SEXP suppressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int& >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< const int& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type B_type(B_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type Omega_type(Omega_typeSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< const double& >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< const bool& >::type quiet(quietSEXP);
    Rcpp::traits::input_parameter< const bool& >::type suppress(suppressSEXP);
    rcpp_result_gen = Rcpp::wrap(tsmvr_solve(X, Y, s1, s2, B_type, Omega_type, eta1, eta2, rho1, rho2, beta1, beta2, epsilon, max_iter, skip, quiet, suppress));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tsmvr_tsmvr_solve(SEXP XSEXP, SEXP YSEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP B_typeSEXP, SEXP Omega_typeSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP epsilonSEXP, SEXP max_iterSEXP, SEXP skipSEXP, SEXP quietSEXP, SEXP suppressSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tsmvr_tsmvr_solve_try(XSEXP, YSEXP, s1SEXP, s2SEXP, B_typeSEXP, Omega_typeSEXP, eta1SEXP, eta2SEXP, rho1SEXP, rho2SEXP, beta1SEXP, beta2SEXP, epsilonSEXP, max_iterSEXP, skipSEXP, quietSEXP, suppressSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _tsmvr_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::mat(*project_pdc)(const arma::mat&,const double)");
        signatures.insert("arma::mat(*ht)(arma::mat,int,bool)");
        signatures.insert("List(*tsmvr_solve)(const arma::mat&,const arma::mat&,const int&,const int&,const std::string&,const std::string&,const double&,const double&,const double&,const double&,const double&,const double&,const double&,const int&,const int&,const bool&,const bool&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _tsmvr_RcppExport_registerCCallable() { 
    R_RegisterCCallable("tsmvr", "_tsmvr_project_pdc", (DL_FUNC)_tsmvr_project_pdc_try);
    R_RegisterCCallable("tsmvr", "_tsmvr_ht", (DL_FUNC)_tsmvr_ht_try);
    R_RegisterCCallable("tsmvr", "_tsmvr_tsmvr_solve", (DL_FUNC)_tsmvr_tsmvr_solve_try);
    R_RegisterCCallable("tsmvr", "_tsmvr_RcppExport_validate", (DL_FUNC)_tsmvr_RcppExport_validate);
    return R_NilValue;
}
