// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_tsmvr_RCPPEXPORTS_H_GEN_
#define RCPP_tsmvr_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace tsmvr {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("tsmvr", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("tsmvr", "_tsmvr_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in tsmvr");
            }
        }
    }

    inline arma::mat htHelper(arma::mat X, const int& s) {
        typedef SEXP(*Ptr_htHelper)(SEXP,SEXP);
        static Ptr_htHelper p_htHelper = NULL;
        if (p_htHelper == NULL) {
            validateSignature("arma::mat(*htHelper)(arma::mat,const int&)");
            p_htHelper = (Ptr_htHelper)R_GetCCallable("tsmvr", "_tsmvr_htHelper");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_htHelper(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat ht(arma::mat X, int s, bool ss = false) {
        typedef SEXP(*Ptr_ht)(SEXP,SEXP,SEXP);
        static Ptr_ht p_ht = NULL;
        if (p_ht == NULL) {
            validateSignature("arma::mat(*ht)(arma::mat,int,bool)");
            p_ht = (Ptr_ht)R_GetCCallable("tsmvr", "_tsmvr_ht");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ht(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(s)), Shield<SEXP>(Rcpp::wrap(ss)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat gdB(const arma::mat& B, const arma::mat& Omega, const arma::mat& S, const arma::mat& H, const int& n, const double& eta) {
        typedef SEXP(*Ptr_gdB)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_gdB p_gdB = NULL;
        if (p_gdB == NULL) {
            validateSignature("arma::mat(*gdB)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const int&,const double&)");
            p_gdB = (Ptr_gdB)R_GetCCallable("tsmvr", "_tsmvr_gdB");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gdB(Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(Omega)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(eta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat gdOmega(const arma::mat& B, const arma::mat& Omega, const arma::mat& X, const arma::mat& Y, const double& eta) {
        typedef SEXP(*Ptr_gdOmega)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_gdOmega p_gdOmega = NULL;
        if (p_gdOmega == NULL) {
            validateSignature("arma::mat(*gdOmega)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const double&)");
            p_gdOmega = (Ptr_gdOmega)R_GetCCallable("tsmvr", "_tsmvr_gdOmega");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gdOmega(Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(Omega)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(eta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat updateB(arma::mat B, const arma::mat& Omega, const arma::mat& X, const arma::mat& Y, const arma::mat& S, const arma::mat& H, const String& type, const int& s, const double& eta = 0.01, const double& rho = 0.5, const double& beta = 0.5) {
        typedef SEXP(*Ptr_updateB)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_updateB p_updateB = NULL;
        if (p_updateB == NULL) {
            validateSignature("arma::mat(*updateB)(arma::mat,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const String&,const int&,const double&,const double&,const double&)");
            p_updateB = (Ptr_updateB)R_GetCCallable("tsmvr", "_tsmvr_updateB");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_updateB(Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(Omega)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(type)), Shield<SEXP>(Rcpp::wrap(s)), Shield<SEXP>(Rcpp::wrap(eta)), Shield<SEXP>(Rcpp::wrap(rho)), Shield<SEXP>(Rcpp::wrap(beta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat updateOmega(const arma::mat& B, arma::mat Omega, const arma::mat& X, const arma::mat& Y, const String& type, const int& s, const double& eta = 0.01, const double& rho = 0.5, const double& beta = 0.5) {
        typedef SEXP(*Ptr_updateOmega)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_updateOmega p_updateOmega = NULL;
        if (p_updateOmega == NULL) {
            validateSignature("arma::mat(*updateOmega)(const arma::mat&,arma::mat,const arma::mat&,const arma::mat&,const String&,const int&,const double&,const double&,const double&)");
            p_updateOmega = (Ptr_updateOmega)R_GetCCallable("tsmvr", "_tsmvr_updateOmega");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_updateOmega(Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(Omega)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(type)), Shield<SEXP>(Rcpp::wrap(s)), Shield<SEXP>(Rcpp::wrap(eta)), Shield<SEXP>(Rcpp::wrap(rho)), Shield<SEXP>(Rcpp::wrap(beta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline List tsmvr_solve(const arma::mat& X, const arma::mat& Y, const int& s1, const int& s2, const String& B_type = "gd", const String& Omega_type = "gd", const double& eta1 = 0.05, const double& eta2 = 0.2, const double& epsilon = 1e-3, const int& max_iter = 2000, const int& skip = 10, const bool& quiet = false) {
        typedef SEXP(*Ptr_tsmvr_solve)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_tsmvr_solve p_tsmvr_solve = NULL;
        if (p_tsmvr_solve == NULL) {
            validateSignature("List(*tsmvr_solve)(const arma::mat&,const arma::mat&,const int&,const int&,const String&,const String&,const double&,const double&,const double&,const int&,const int&,const bool&)");
            p_tsmvr_solve = (Ptr_tsmvr_solve)R_GetCCallable("tsmvr", "_tsmvr_tsmvr_solve");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tsmvr_solve(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(s1)), Shield<SEXP>(Rcpp::wrap(s2)), Shield<SEXP>(Rcpp::wrap(B_type)), Shield<SEXP>(Rcpp::wrap(Omega_type)), Shield<SEXP>(Rcpp::wrap(eta1)), Shield<SEXP>(Rcpp::wrap(eta2)), Shield<SEXP>(Rcpp::wrap(epsilon)), Shield<SEXP>(Rcpp::wrap(max_iter)), Shield<SEXP>(Rcpp::wrap(skip)), Shield<SEXP>(Rcpp::wrap(quiet)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_tsmvr_RCPPEXPORTS_H_GEN_
